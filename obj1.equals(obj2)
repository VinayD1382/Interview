object : having state and behaviour : state means represents the attribute or fields 
ex : 
class Main{
int val ;
public static void main(String[] args){
Main obj = new Main();
obj.val = 10; // representing the attrbute 
obj.method() // call the method is the behaviour.


public class Main {
    public static void main(String[] args) {
        // Create two String objects with the same content
        String str1 = new String("Hello");
        String str2 = new String("Hello");

        // Using '==': compares memory locations (object references)
        // This will return false because str1 and str2 are two different objects in memory
        System.out.println("str1 == str2: " + (str1 == str2));  // false

        // Using 'equals()': compares the content (logical equality)
        // This will return true because the content of str1 and str2 is the same ("Hello")
        System.out.println("str1.equals(str2): " + str1.equals(str2));  // true

        // Now letâ€™s create another reference pointing to str1
        String str3 = str1;

        // Using '==': compares memory locations
        // This will return true because str3 and str1 point to the same object in memory
        System.out.println("str1 == str3: " + (str1 == str3));  // true

        // Using 'equals()': compares the content
        // This will return true because str1 and str3 have the same content
        System.out.println("str1.equals(str3): " + str1.equals(str3));  // true
    }
}
